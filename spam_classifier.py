# -*- coding: utf-8 -*-
"""SPAM CLASSIFIER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/spam-classifier-1e4731f3-1398-42c7-95b8-a76a5ddcd598.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240303/auto/storage/goog4_request%26X-Goog-Date%3D20240303T082818Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8cba84fc2ac59216fbbd724e50d6fd635d7fe07fdc0adab7a37a6d6d823de884bdb1c9ad1be6b21b54b2e12a91b53ff7ce14aed914b335b54aa3415cf39dd875ad04bb34f7290c29d65a8811a8d1778ab7eb465830fa606f3ea2f4be514a40a1ad20d07dba53bcc35382304bcf4b64d6949a56a9dd543efabb0916299d6d28c8911564a1efc123af5a8946252b9d7ea41dbeee6863fb8798b8f3e514b6568e71b828d7df8b0e58e917789749565aa4e72f23b2506a7ac8bd52712fa516f0f02f397615d02e7041cc1a22c2f5f73fd31162cf4782f7f4f6095b32ec523033313f2258eb02a6ea44cb27fb26831a2f0a550d9cd2909b6202f4e80471a4fd2299d2
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'sms-spam-collection-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F483%2F982%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240303%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240303T082818Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D9a88fa759a413f730123e0bcc0139c38743abefe6dd5503ecdc087968609c57d027a6812185296a54438df2a5eeb99cb46068f61c5d3d74686ac9b3eef8f066aebbb84814e12eef233110557bd17521737f8d625280f382c5515ed3e68cc1a71e4f4feafb3ef2acdfad01b396e05371df908f0ef15fad91adb263fdb90312b0fe9cafad6ee680c4614f2b36ac38108cbe718d8eac9b3178c28c37e85cc12f09b44bf02a8f7191d5ce9f25f747b5ed937bc8d91b87463cee35f89939fd7fa99f6b6967f17b42dd9874fe40198593f4ce0077887495cc2068225217129a7a4967e01653ad9cccd2aad63e69f9ec68c3592d4fca30eb6bdd592e2af7f2cda35c2a9'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""**SMS CLASSIFIER DATASET**"""

import numpy as np
import pandas as pd
import warnings
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
nltk.download("stopwords")
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,classification_report

df=pd.read_csv("/kaggle/input/sms-spam-collection-dataset/spam.csv",encoding="latin-1")

df

"""**DATA PREPROCESSING AND CLEANING**"""

df.drop("Unnamed: 2",inplace=True,axis=1)
df.drop("Unnamed: 3",inplace=True,axis=1)
df.drop("Unnamed: 4",inplace=True,axis=1)
df.sample(10)

"""**STEMMING THE CLEANED DATA AND REMOVING STOPWORDS**"""

def clean_data(text):
    text=text.lower()
    words=re.sub('[^a-z]',' ',text)

    stop_words=set(stopwords.words("english"))
    text=' '.join([word for word in words.split() if word not in stop_words])
    stemmer=PorterStemmer()
    text=' '.join([stemmer.stem(word) for word in words.split()])
    return text
clean_text=df['v2'].apply(clean_data)
print(clean_text.head())

"""**VECTORIZING THE DATASET AND CREATING TESTING AND TRAINING SPLITS**"""

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(clean_text)
y = df['v1'].map({'ham': 0, 'spam': 1})

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print('Training set shape:', X_train.shape)
print('Testing set shape:', X_test.shape)

"""**USING DIFFERENT MODELS TO FIND BEST PERFORMANCE**"""

logreg=LogisticRegression(random_state=42)
logreg.fit(X_train,y_train)
y_pred = logreg.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)


report = classification_report(y_test, y_pred, target_names=['Ham', 'Spam'])

print('Accuracy:', accuracy)
print('Classification Report:\n', report)
scores = cross_val_score(logreg, X_train, y_train, cv=10)
print("Accuracy with CV: ",scores.mean())
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="spring", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.show()

DTC=DecisionTreeClassifier()
DTC.fit(X_train,y_train)
y_pred=DTC.predict(X_test)
accuracy1=accuracy_score(y_test,y_pred)
report = classification_report(y_test, y_pred, target_names=['Ham', 'Spam'])

print('Accuracy:', accuracy1)
print('Classification Report:\n', report)
scores = cross_val_score(DTC, X_train, y_train, cv=10)
print("Accuracy with CV: ",scores.mean())
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="winter", cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.show()

svc=SVC()
svc.fit(X_train,y_train)
y_pred=svc.predict(X_test)
accuracy2=accuracy_score(y_test,y_pred)
report = classification_report(y_test, y_pred, target_names=['Ham', 'Spam'])

print('Accuracy:', accuracy2)
print('Classification Report:\n', report)
scores = cross_val_score(svc, X_train, y_train, cv=10)
print("Accuracy with CV: ",scores.mean())
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="summer", cbar=True)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.show()

classifiers = ['Logistic Regression','Decision tree','SVC']
acc=[accuracy,accuracy1,accuracy2]
sns.barplot(x=classifiers,y=acc,color='violet')

